// <auto-generated />
using System;
using AcceptsCoin.Services.IdentityServer.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AcceptsCoin.Services.IdentityServer.Migrations
{
    [DbContext(typeof(AcceptsCoinIdentityDbContext))]
    partial class AcceptsCoinIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("postgis")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("27fc6d20-b661-43c5-b48d-93eca8185ece"),
                            CreatedById = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            CreatedDate = new DateTime(2022, 1, 13, 0, 40, 47, 86, DateTimeKind.Local).AddTicks(6790),
                            Deleted = false,
                            Name = "Administrator",
                            Published = true
                        },
                        new
                        {
                            RoleId = new Guid("90000f34-509f-4a81-877c-0c0cafadb573"),
                            CreatedById = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            CreatedDate = new DateTime(2022, 1, 13, 0, 40, 47, 87, DateTimeKind.Local).AddTicks(2830),
                            Deleted = false,
                            Name = "Business",
                            Published = true
                        },
                        new
                        {
                            RoleId = new Guid("553ca261-6db1-4413-af03-4c1549a4d1de"),
                            CreatedById = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            CreatedDate = new DateTime(2022, 1, 13, 0, 40, 47, 87, DateTimeKind.Local).AddTicks(2880),
                            Deleted = false,
                            Name = "Partner",
                            Published = true
                        },
                        new
                        {
                            RoleId = new Guid("25b3c861-2fd3-4b6e-a623-d24010a9500f"),
                            CreatedById = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            CreatedDate = new DateTime(2022, 1, 13, 0, 40, 47, 87, DateTimeKind.Local).AddTicks(2900),
                            Deleted = false,
                            Name = "User",
                            Published = true
                        });
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean");

                    b.Property<bool>("SubscribedNewsLetter")
                        .HasColumnType("boolean");

                    b.Property<bool>("UpdatePassword")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            Activated = true,
                            CreatedById = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            CreatedDate = new DateTime(2022, 1, 13, 0, 40, 47, 48, DateTimeKind.Local).AddTicks(8030),
                            Deleted = false,
                            Email = "info@acceptscoin.com",
                            Name = "Super Admin",
                            Password = "superAdmin@123",
                            Published = true,
                            SubscribedNewsLetter = true,
                            UpdatePassword = true,
                            UserName = "info@acceptscoin.com"
                        });
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            RoleId = new Guid("27fc6d20-b661-43c5-b48d-93eca8185ece")
                        },
                        new
                        {
                            UserId = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            RoleId = new Guid("90000f34-509f-4a81-877c-0c0cafadb573")
                        },
                        new
                        {
                            UserId = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            RoleId = new Guid("553ca261-6db1-4413-af03-4c1549a4d1de")
                        },
                        new
                        {
                            UserId = new Guid("999bb90f-3167-4f81-83bb-0c76d1d3ace5"),
                            RoleId = new Guid("25b3c861-2fd3-4b6e-a623-d24010a9500f")
                        });
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.Role", b =>
                {
                    b.HasOne("AcceptsCoin.Services.IdentityServer.Domain.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcceptsCoin.Services.IdentityServer.Domain.Models.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.User", b =>
                {
                    b.HasOne("AcceptsCoin.Services.IdentityServer.Domain.Models.User", "CreatedBy")
                        .WithMany("UserCreatorUser")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AcceptsCoin.Services.IdentityServer.Domain.Models.User", "UpdatedBy")
                        .WithMany("UserUpdaterUser")
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.UserRole", b =>
                {
                    b.HasOne("AcceptsCoin.Services.IdentityServer.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AcceptsCoin.Services.IdentityServer.Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AcceptsCoin.Services.IdentityServer.Domain.Models.User", b =>
                {
                    b.Navigation("UserCreatorUser");

                    b.Navigation("UserRoles");

                    b.Navigation("UserUpdaterUser");
                });
#pragma warning restore 612, 618
        }
    }
}
